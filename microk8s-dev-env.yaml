- name: microk8s development environment
  hosts: "{{ target|default('all') }}"
  become: true

  pre_tasks:
    - block:
      - name: amazon-efs-utils
        ansible.builtin.include_tasks: tasks/amazon-efs-utils.yml
      when:
        - ansible_system_vendor == "Amazon EC2"

  roles:
    - role: microk8s
    - role: named
      when: named_enabled

  tasks:
    - name: /etc/docker exists
      ansible.builtin.stat:
        path: /etc/docker
      register: is_docker
    - block:
      - name: /etc/docker/daemon.json create
        ansible.builtin.copy:
          content: "{}"
          dest: /etc/docker/daemon.json
          force: false

      - name: /etc/docker/daemon.json read
        ansible.builtin.slurp:
          src: /etc/docker/daemon.json
        register: daemon_json

      - name: /etc/docker/daemon.json
        # https://github.com/particledecay/ansible-jsonpatch
        json_patch:
          src: /etc/docker/daemon.json
          operations:
            - op: add
              path: "/insecure-registries"
              value: []
          pretty: true
          create: true
          create_type: object
        when:
          - (daemon_json['content']|b64decode|from_json)['insecure-registries'] is not defined

      - name: /etc/docker/daemon.json
        json_patch:
          src: /etc/docker/daemon.json
          operations:
            - op: add
              path: "/insecure-registries/-"
              value: "localhost:32000"
          pretty: true
          create: true
          create_type: object
        when:
          - (daemon_json['content']|b64decode|from_json)['insecure-registries'] is not defined
            or (daemon_json['content']|b64decode|from_json)['insecure-registries'] is not contains('localhost:32000')
      when:
        - is_docker.stat.isdir is defined and is_docker.stat.isdir

    - block:
      - name: /usr/local/bin/finalise-external-dns.sh
        ansible.builtin.template:
          dest: /usr/local/bin/finalise-external-dns.sh
          lstrip_blocks: true
          mode: "0755"
          src: templates/usr/local/bin/finalise-external-dns.sh.j2

      - block:
        - name: /etc/resolv.conf is symlink?
          ansible.builtin.stat:
            path: /etc/resolv.conf
          register: resolv_conf

        - block:
          - name: unlink /etc/resolv.conf from systemd-resolved
            ansible.builtin.command:
              cmd: unlink /etc/resolv.conf

          - name: copy /run/systemd/resolve/stub-resolv.conf to /etc/resolv.conf
            ansible.builtin.shell:
              cmd: sed -n -e '/^#/!p' /run/systemd/resolve/stub-resolv.conf >/etc/resolv.conf
          when: resolv_conf.stat.islnk

        - name: set nameserver
          ansible.builtin.lineinfile:
            line: nameserver {{ ansible_default_ipv4.address }}
            path: /etc/resolv.conf
            search_string: nameserver

        - name: microk8s set nameserver
          ansible.builtin.shell:
            cmd: >
              microk8s kubectl -n kube-system get configmap/coredns -oyaml
              | sed 's/forward \. .*$/forward . {{ ansible_default_ipv4.address }}/'
              | microk8s kubectl apply -f -
        tags: [bind,named,resolvd]
      when:
        - named_enabled

    - block:
      - name: ingress service
        ansible.builtin.shell:
          cmd: |
            cat <<EOT |microk8s kubectl apply -f -
              apiVersion: v1
              kind: Service
              metadata:
                name: ingress
                namespace: ingress
              spec:
                selector:
                  name: nginx-ingress-microk8s
                type: LoadBalancer
                ports:
                - name: http
                  protocol: TCP
                  port: 80
                  targetPort: 80
                - name: https
                  protocol: TCP
                  port: 443
                  targetPort: 443
            EOT

      - name: ingress IP via LB
        ansible.builtin.shell:
          cmd: |
            microk8s kubectl -ningress get daemonset nginx-ingress-microk8s-controller -o yaml \
            |sed -e 's|- --publish-status-address=.*|- --publish-service=$(POD_NAMESPACE)/ingress|' \
            |microk8s kubectl apply -f -
      tags: [ingress]
