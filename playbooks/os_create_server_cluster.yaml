---
# playbooks/os_create_server_cluster.yaml
# ansible-playbook restek.core.os_create_server_cluster -e '{os_cloud: nci-er01, stack_name: k8sdev, vip: 1}'
- name: OpenStack prep. for deployment
  hosts: localhost
  become: false
  connection: local
  force_handlers: true
  gather_facts: false
  vars:
    os_cloud: nci-er01
    #stack_name: MUST be provided as parameter
    dev: false
    vip: 0
    hot_items:
      - env.hot.yaml
      - server.hot.yaml
      - server-asg.hot.yaml
      - lb-vip.hot.yaml

  handlers:
    - name: Cleanup tmpdir
      ansible.builtin.file:
        path: "{{ tmpdir.path }}"
        state: absent

  pre_tasks:
    - name: Assert
      ansible.builtin.assert:
        that:
          - stack_name is defined
          - os_cloud is defined
          - vip >= 0
        msg: "'os_cloud', 'stack_name' must be defined"

  tasks:
    - name: Create tmpdir
      ansible.builtin.tempfile:
        state: directory
      notify: Cleanup tmpdir
      register: tmpdir

    - name: Get hot files
      when: not dev
      ansible.builtin.get_url:
        dest: "{{ tmpdir.path }}"
        mode: "0644"
        url: https://raw.githubusercontent.com/SydneyResearchTech/cfn-templates/refs/heads/main/{{ item }}
      with_items: "{{ hot_items }}"
    - name: Get hot files local
      when: dev
      ansible.builtin.copy:
        dest: "{{ tmpdir.path }}"
        mode: "0644"
        src: "{{ lookup('ansible.builtin.env', 'HOME') }}/cfn-templates/{{ item }}"
      with_items: "{{ hot_items }}"

    - name: OpenStack stack environment
      ansible.builtin.copy:
        content: |
          parameter_defaults:
            volume_size: 20
            volume_type: Nirin2_Transaction
        dest: "{{ tmpdir.path }}/ansible.env.yaml"
        mode: "0644"

    - name: Deploy stack
      openstack.cloud.stack:
        cloud: "{{ os_cloud }}"
        environment:
          - "{{ tmpdir.path }}/env.hot.yaml"
          - "{{ tmpdir.path }}/ansible.env.yaml"
        name: "{{ stack_name }}"
        parameters:
          desired_capacity: 1
          router: er01
        rollback: true
        state: present
        template: "{{ tmpdir.path }}/server-asg.hot.yaml"
      register: stack_reg
    # - ansible.builtin.debug: {var: stack_reg}
    # - ansible.builtin.debug: {msg: "{{ (stack_reg.stack.outputs | community.general.json_query('[?output_key==`networkId`]')).0.output_value }}"}

    - name: VIP stack
      openstack.cloud.stack:
        cloud: "{{ os_cloud }}"
        name: "{{ stack_name }}-vip-{{ idx }}"
        parameters:
          network: "{{ (stack_reg.stack.outputs | community.general.json_query('[?output_key==`networkId`]')).0.output_value }}"
        rollback: true
        state: present
        template: "{{ tmpdir.path }}/lb-vip.hot.yaml"
      loop: "{{ range(0, vip) }}"
      loop_control:
        index_var: idx
      register: vip_reg
    #- ansible.builtin.debug: {var: vip_reg}
    #- ansible.builtin.debug: {msg: "{{ vip_reg.results | community.general.json_query('[*].stack.outputs[?output_key==`fixed_ip_address`].output_value') }}"}

    - name: OpenStack server list
      openstack.cloud.server_info:
        cloud: "{{ os_cloud }}"
        detailed: true
        filters:
          metadata:
            "metering.server_group": "{{ stack_reg.stack.id }}"
      register: servers_reg
    # - ansible.builtin.debug: {var: servers_reg}

    - name: Add hosts to inventory
      ansible.builtin.add_host:
        groups:
          - all
          - microk8s
          - stack_{{ stack_reg.stack.name }}
        name: "{{ item.name }}"
        ansible_host: "{{ item.access_ipv4 }}"
        os_allowed_address_pairs: "{{ vip_reg.results | community.general.json_query('[*].stack.outputs[?output_key==`fixed_ip_address`].output_value') | flatten }}"
        os_network_id: "{{ (stack_reg.stack.outputs | community.general.json_query('[?output_key==`networkId`]')).0.output_value }}"
      with_items: "{{ servers_reg.servers }}"


- name: Configure server hosts
  hosts: "stack_{{ stack_name }},&microk8s"
  become: true
  vars:
    os_cloud: nci-er01

  pre_tasks:
    - name: OpenStack config.
      become: false
      block:
        - name: OpenStack server port
          openstack.cloud.port_info:
            cloud: "{{ os_cloud }}"
            filters:
              mac_address: "{{ ansible_default_ipv4.macaddress }}"
          delegate_to: localhost
          register: port_reg
        # - ansible.builtin.debug: {var: port_reg}
        # - ansible.builtin.debug: {msg: "{{ os_allowed_address_pairs | community.general.json_query('[].{\"ip_address\": @}') }}"}

        # state is present but all of the following are missing: network
        - name: OpenStack port allowed address pairs
          when: 0 > 1
          openstack.cloud.port:
            cloud: "{{ os_cloud }}"
            allowed_address_pairs: "{{ os_allowed_address_pairs | community.general.json_query('[].{\"ip_address\": @}') }}"
            name: "{{ port_reg.ports.0.name }}"
            state: present
          delegate_to: localhost

        - name: OpenStack port allowed address pairs WORKAROUND
          ansible.builtin.command:
            cmd: >-
              openstack port set
              --no-allowed-address
              {% for ip_address in os_allowed_address_pairs %}
              --allowed-address ip-address={{ ip_address }}
              {% endfor %}
              {{ port_reg.ports.0.name }}
          delegate_to: localhost
          register: port_set_reg
        # - ansible.builtin.debug: {var: port_set_reg}

  roles:
    - role: microk8s
      when: inventory_hostname in groups["microk8s"]
  tasks: []
