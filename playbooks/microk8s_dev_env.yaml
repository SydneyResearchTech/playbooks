- name: Microk8s development environment
  hosts: "{{ target|default('all') }}"
  become: true
  vars:
    dns_domain: fake.sydney.edu.au
    helm: "/snap/microk8s/current/bin/helm"
    named_enabled: true

  pre_tasks:
    - name: Install Amazon EFS utils
      when:
        - ansible_system_vendor == "Amazon EC2"
      block:
        - name: Include amazon-efs-utils
          ansible.builtin.include_tasks: tasks/amazon-efs-utils.yml

    - name: Install packages
      ansible.builtin.package:
        name:
          - python3-yaml
        state: present

    - name: Create directories
      tags: [always]
      ansible.builtin.file:
        mode: "0755"
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/ansible
        - /etc/ansible/.cache
        - /etc/systemd/resolved.conf.d

    - name: Install kubernetes python module
      tags: [always]
      ansible.builtin.pip:
        name:
          - kubernetes
        break_system_packages: true
        extra_args: -U
        state: present

  roles:
    - role: restek.core.k8sclient
    - role: restek.core.microk8s
      microk8s_users: ["{{ ansible_user }}"]
      microk8s_enable: [dns, hostpath-storage, metallb]

  tasks:
    - name: Slurp microk8s config
      ansible.builtin.command:
        cmd: microk8s config
      register: microk8s_config_reg
      changed_when: false

    - name: Set facts
      ansible.builtin.set_fact:
        kubeconfig: "{{ microk8s_config_reg.stdout | from_yaml }}"
        tsig_name: "tsigkey-{{ dns_domain }}"
        tsig_name_meta: "tsigkey-{{ dns_domain | replace('.', '-') }}"

    - name: Configure DNS resolve
      tags: [named]
      when:
        - named_enabled
      block:
        - name: Add ResTek helm repo
          kubernetes.core.helm_repository:
            binary_path: "{{ helm }}"
            repo_name: restek
            repo_url: https://sydneyresearchtech.github.io/charts/
            state: present

        - name: Get host configured DNS forwarders
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              resolvectl -i{{ ansible_default_ipv4.interface }} dns | \
                sed \
                  -e 's/.*:\s\+\([0-9a-f.: ]*\).*$/\1/' \
                  -e 's/ fe80::[0-9a-f.:]*//'
            executable: /bin/bash
          register: dns_forwarders_reg
          changed_when: false

        - name: Get domain search
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              resolvectl -i{{ ansible_default_ipv4.interface }} domain | \
                sed 's/.*:\s\+\(.*\)$/\1/'
            executable: /bin/bash
          register: dns_search_reg
          changed_when: false

        - name: Generate tsig key
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              umask 0077
              microk8s kubectl run -it --rm {{ 60 | random | to_uuid }} --image=ubuntu/bind9 --restart=Never -- \
              tsig-keygen {{ tsig_name }} | \
              sed -n '/^key/,/^};/p' \
              > /etc/ansible/.cache/{{ tsig_name }}
            executable: /bin/bash
            creates: /etc/ansible/.cache/{{ tsig_name }}
          notify:
            - Update bind server

        - name: Slurp tsig key
          ansible.builtin.slurp:
            src: /etc/ansible/.cache/{{ tsig_name }}
          register: tsig_reg

        - name: Get all helm charts deployed
          ansible.builtin.command:
            cmd: microk8s helm list -A -o json
          changed_when: false
          register: helm_list_reg

        - name: Set facts # noqa: jinja[spacing]
          ansible.builtin.set_fact:
            bind_deployed: "{{ helm_list_reg.stdout | from_json | selectattr('name','search','bind') | list | count > 0 }}"
            dns_forwarders: "{{ dns_forwarders_reg.stdout | split | ansible.utils.ipv4 | list }}"
            dns_search: "{{ dns_search_reg.stdout | split }}"
            rfc2136_tsig_secret: '{{ tsig_reg.content | b64decode | regex_search("secret\s+.(.*).;$","\1",multiline=True) | first }}'
            rfc2136_tsig_secret_alg: '{{ tsig_reg.content | b64decode | regex_search("algorithm\s+(.*);$","\1",multiline=True) | first }}'
            rfc2136_tsig_keyname: '{{ tsig_reg.content | b64decode | regex_search("key\s+.([a-z0-9-.]+).*$","\1",multiline=True) | first }}'
            tsig_secret_data:
              - key: "{{ tsig_name }}"
                value: "{{ tsig_reg.content }}"

        - name: Create tsig secret
          kubernetes.core.k8s:
            apply: true
            kubeconfig: "{{ kubeconfig }}"
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: "{{ tsig_name_meta }}"
                namespace: default
              data: "{{ tsig_secret_data | items2dict }}"
          run_once: true
          notify:
            - Update bind server

        - name: Deploy bind9
          when:
            - not bind_deployed
            - dns_forwarders
          kubernetes.core.helm:
            binary_path: "{{ helm }}"
            name: bind
            namespace: default
            chart_ref: restek/bind
            state: present
            values: "{{ lookup('ansible.builtin.template', 'bind9_values.yaml.j2') | from_yaml }}"
            kubeconfig: "{{ kubeconfig }}"
            update_repo_cache: false

        - name: Get LB IP address?
          kubernetes.core.k8s_info:
            kind: service
            kubeconfig: "{{ kubeconfig }}"
            name: bind
            namespace: default
          register: bind_service_info

        - name: Slurp coredns config
          kubernetes.core.k8s_info:
            kind: ConfigMap
            kubeconfig: "{{ kubeconfig }}"
            name: coredns
            namespace: kube-system
          register: coredns_configmap

        - name: Set facts
          ansible.builtin.set_fact:
            dns_server: "{{ bind_service_info.resources.0.status.loadBalancer.ingress.0.ip }}"

        - name: Coredns
          when:
            - "('forward %s. %s'|format(dns_domain,dns_server)) not in coredns_configmap.resources.0.data.Corefile"
          block:
            - name: Set facts
              ansible.builtin.set_fact:
                coredns_corefile: '{{
                  coredns_configmap.resources.0.data.Corefile |
                  regex_replace(
                    "(\s+forward\s.*\n?)+",
                    ("\n%4sforward %s. %s\n%4sforward . /etc/resolv.conf\n"|format("",dns_domain,dns_server,"")),
                    multiline=True)
                  }}'
            # - ansible.builtin.debug: {var: coredns_corefile}

            - name: Update coredns
              kubernetes.core.k8s:
                apply: true
                kubeconfig: "{{ kubeconfig }}"
                state: present
                definition: "{{ coredns_configmap.resources.0 | combine({'data': {'Corefile': coredns_corefile}}) }}"
              notify:
                - Restart coredns

        - name: Update resolved
          ansible.builtin.copy:
            content: |
              [Resolve]
              DNS={{ dns_server }}#{{ dns_domain }}
            dest: /etc/systemd/resolved.conf.d/50_microk8s_external_dns.conf
            mode: "0644"
          notify:
            - Restart resolved

        - name: Add external-dns helm repo
          kubernetes.core.helm_repository:
            binary_path: "{{ helm }}"
            repo_name: external-dns
            repo_url: "https://kubernetes-sigs.github.io/external-dns/"
            state: present

        - name: Configure external dns
          kubernetes.core.helm:
            binary_path: "{{ helm }}"
            kubeconfig: "{{ kubeconfig }}"
            chart_ref: external-dns/external-dns
            create_namespace: true
            release_namespace: external-dns
            name: external-dns
            values:
              provider: {name: rfc2136}
              extraArgs:
                - --rfc2136-host={{ dns_server }}
                - --rfc2136-port=53
                - --rfc2136-zone={{ dns_domain }}
                - --rfc2136-tsig-secret={{ rfc2136_tsig_secret }}
                - --rfc2136-tsig-secret-alg={{ rfc2136_tsig_secret_alg }}
                - --rfc2136-tsig-keyname={{ rfc2136_tsig_keyname }}
                - --rfc2136-tsig-axfr
                - --txt-owner-id=k8s
                - --txt-prefix=external-dns
                - --domain-filter={{ dns_domain }}

  handlers:
    - name: Update bind server
      ansible.builtin.command:
        cmd: microk8s kubectl rollout restart deployment bind
      changed_when: false
      run_once: true

    - name: Restart coredns
      ansible.builtin.command:
        cmd: microk8s kubectl -n kube-system rollout restart deployment coredns
      changed_when: false
      run_once: true

    - name: Restart resolved
      ansible.builtin.service:
        name: systemd-resolved.service
        state: restarted
