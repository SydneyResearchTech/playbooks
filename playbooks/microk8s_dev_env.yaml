- name: Microk8s development environment
  hosts: "{{ target|default('all') }}"
  become: true
  vars:
    dns_domain: fake.sydney.edu.au
    helm: "/snap/microk8s/current/bin/helm"

  pre_tasks:
    - name: Install Amazon EFS utils
      when:
        - ansible_system_vendor == "Amazon EC2"
      block:
        - name: Include amazon-efs-utils
          ansible.builtin.include_tasks: tasks/amazon-efs-utils.yml

    - name: Create directories
      tags: [always]
      ansible.builtin.file:
        mode: "0755"
        path: "{{ item }}"
        state: directory
      with_items:
        - /etc/ansible
        - /etc/ansible/.cache

  roles:
    - role: restek.core.microk8s

  tasks:
    - name: Does /etc/docker exist?
      ansible.builtin.stat:
        path: /etc/docker
      register: is_docker

    - name: Slurp microk8s config
      ansible.builtin.command:
        cmd: microk8s config
      register: microk8s_config_ret
      changed_when: false

    - name: Set facts
      ansible.builtin.set_fact:
        kubeconfig: "{{ microk8s_config_ret.stdout | from_yaml }}"

    - name: Configure Docker daemon
      when:
        - is_docker.stat.isdir is defined and is_docker.stat.isdir
      block:
        - name: Create /etc/docker/daemon.json
          ansible.builtin.copy:
            content: "{}"
            dest: /etc/docker/daemon.json
            force: false
            mode: "0644"

        - name: Read /etc/docker/daemon.json
          ansible.builtin.slurp:
            src: /etc/docker/daemon.json
          register: daemon_json

        - name: Patch /etc/docker/daemon.json
          # https://github.com/particledecay/ansible-jsonpatch
          json_patch:
            src: /etc/docker/daemon.json
            operations:
              - op: add
                path: "/insecure-registries"
                value: []
            pretty: true
            create: true
            create_type: object
          when:
            - (daemon_json['content']|b64decode|from_json)['insecure-registries'] is not defined

        - name: Patch /etc/docker/daemon.json
          json_patch:
            src: /etc/docker/daemon.json
            operations:
              - op: add
                path: "/insecure-registries/-"
                value: "localhost:32000"
            pretty: true
            create: true
            create_type: object
          when:
            - (daemon_json['content']|b64decode|from_json)['insecure-registries'] is not defined
              or (daemon_json['content']|b64decode|from_json)['insecure-registries'] is not contains('localhost:32000')

    - name: Configure DNS resolve
      tags: [named]
      when:
        - named_enabled | default(false) | bool
      block:
        - name: Add ResTek helm repo
          kubernetes.core.helm_repository:
            binary_path: "{{ helm }}"
            repo_name: restek
            repo_url: https://sydneyresearchtech.github.io/charts/
            state: present

        - name: DNS forwarders?
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              resolvectl -i{{ ansible_default_ipv4.interface }} dns | \
                sed \
                  -e 's/.*:\s\+\([0-9a-f.: ]*\).*$/\1/' \
                  -e 's/ fe80::[0-9a-f.:]*//'
            executable: /bin/bash
          register: dns_forwarders_output
          changed_when: false

        - name: DNS search?
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              resolvectl -i{{ ansible_default_ipv4.interface }} domain | \
                sed 's/.*:\s\+\(.*\)$/\1/'
            executable: /bin/bash
          register: dns_search_output
          changed_when: false

        - name: Generate tsig key
          ansible.builtin.shell:
            cmd: |
              set -o pipefail
              umask 0077
              microk8s kubectl run -it --rm {{ 60 | random | to_uuid }} --image=ubuntu/bind9 --restart=Never \
              -- tsig-keygen tsigkey-fake.sydney.edu.au | \
              sed -n '/^key/,/^};/p' \
              > /etc/ansible/.cache/tsigkey-fake.sydney.edu.au
            executable: /bin/bash
            creates: /etc/ansible/.cache/tsigkey-fake.sydney.edu.au
          notify:
            - Update bind server
            - Update external dns

        - name: Slurp tsig key
          ansible.builtin.slurp:
            src: /etc/ansible/.cache/tsigkey-fake.sydney.edu.au
          register: tsig_ret

        - name: Get all helm charts deployed
          ansible.builtin.command:
            cmd: microk8s helm list -A -o json
          changed_when: false
          register: helm_list_ret

        - name: Set facts # noqa: jinja[spacing]
          ansible.builtin.set_fact:
            bind_deployed: "{{ helm_list_ret.stdout | from_json | selectattr('name','search','bind') | list | count > 0 }}"
            dns_forwarders: "{{ dns_forwarders_output.stdout | split | ansible.utils.ipv4 | list }}"
            dns_search: "{{ dns_search_output.stdout | split }}"
            rfc2136_tsig_secret: '{{ tsig_ret.content | b64decode | regex_search("secret\s+.(.*).;$","\1",multiline=True) | first }}'
            rfc2136_tsig_secret_alg: '{{ tsig_ret.content | b64decode | regex_search("algorithm\s+(.*);$","\1",multiline=True) | first }}'
            rfc2136_tsig_keyname: '{{ tsig_ret.content | b64decode | regex_search("key\s+.([a-z0-9-.]+).*$","\1",multiline=True) | first }}'

        - name: Create tsig secret
          kubernetes.core.k8s:
            apply: true
            kubeconfig: "{{ kubeconfig }}"
            state: present
            definition:
              apiVersion: v1
              kind: Secret
              metadata:
                name: tsigkey-fake-sydney-edu-au
                namespace: default
              data:
                tsigkey-fake.sydney.edu.au: "{{ tsig_ret.content }}"
          run_once: true
          notify:
            - Update external dns
            - Update bind server

        - name: Deploy bind9
          when:
            - dns_forwarders
          kubernetes.core.helm:
            binary_path: "{{ helm }}"
            name: bind
            namespace: default
            chart_ref: restek/bind
            state: present
            values: "{{ lookup('ansible.builtin.template', 'bind9_values.yaml.j2') | from_yaml }}"
            kubeconfig: "{{ kubeconfig }}"
            update_repo_cache: true

        - name: Get LB IP address?
          kubernetes.core.k8s_info:
            kind: service
            kubeconfig: "{{ kubeconfig }}"
            name: bind
            namespace: default
          register: bind_service_info

        - name: Slurp coredns config
          kubernetes.core.k8s_info:
            kind: ConfigMap
            kubeconfig: "{{ kubeconfig }}"
            name: coredns
            namespace: kube-system
          register: coredns_configmap

        - name: Set facts
          ansible.builtin.set_fact:
            dns_server: "{{ bind_service_info.resources.0.status.loadBalancer.ingress.0.ip }}"

        - name: Set facts
          ansible.builtin.set_fact:
            coredns_corefile: '{{
              coredns_configmap.resources.0.data.Corefile |
              regex_replace(
                "(\s+forward\s+[a-z0-9.]*\s+[a-f0-9:.]+\n?)+",
                ("\n%4sforward fake.sydney.edu.au %s\n%4sforward . %s\n"|format("",dns_server,"",(dns_forwarders|first))),
                multiline=True)
              }}'

        - name: Is /etc/resolv.conf a symlink?
          ansible.builtin.stat:
            path: /etc/resolv.conf
          register: resolv_conf

        - name: Update /etc/resolv.conf
          when: resolv_conf.stat.islnk
          block:
            - name: Unlink /etc/resolv.conf from systemd-resolved
              ansible.builtin.command:
                cmd: unlink /etc/resolv.conf
                removes: /etc/resolv.conf

            - name: Copy /run/systemd/resolve/stub-resolv.conf to /etc/resolv.conf
              ansible.builtin.shell: # noqa: command-instead-of-module
                cmd: sed -n -e '/^#/!p' /run/systemd/resolve/stub-resolv.conf >/etc/resolv.conf
                creates: /etc/resolv.conf

        - name: Update /etc/resolv.conf
          ansible.builtin.copy:
            content: |
              nameserver {{ dns_server }}
              nameserver {{ dns_forwarders | first }}
              options edns0 trust-ad
              search fake.sydney.edu.au {{ dns_search | join(" ") }}
            dest: /etc/resolv.conf
            mode: "0644"

        - name: Configure coredns
          kubernetes.core.k8s:
            apply: true
            kubeconfig: "{{ kubeconfig }}"
            state: present
            definition: "{{ coredns_configmap.resources.0 | combine({'data': {'Corefile': coredns_corefile}}) }}"

        - name: Add external-dns helm repo
          kubernetes.core.helm_repository:
            binary_path: "{{ helm }}"
            repo_name: external-dns
            repo_url: "https://kubernetes-sigs.github.io/external-dns/"
            state: present

        - name: Configure external dns
          kubernetes.core.helm:
            binary_path: "{{ helm }}"
            kubeconfig: "{{ kubeconfig }}"
            chart_ref: external-dns/external-dns
            create_namespace: true
            release_namespace: external-dns
            name: external-dns
            values:
              provider: {name: rfc2136}
              extraArgs:
                - --rfc2136-host={{ dns_server }}
                - --rfc2136-port=53
                - --rfc2136-zone={{ dns_domain }}
                - --rfc2136-tsig-secret={{ rfc2136_tsig_secret }}
                - --rfc2136-tsig-secret-alg={{ rfc2136_tsig_secret_alg }}
                - --rfc2136-tsig-keyname={{ rfc2136_tsig_keyname }}
                - --rfc2136-tsig-axfr
                - --txt-owner-id=k8s
                - --txt-prefix=external-dns
                - --domain-filter={{ dns_domain }}

  handlers:
    - name: Update bind server
      ansible.builtin.command:
        cmd: microk8s kubectl rollout restart deployment bind
      run_once: true
      changed_when: true
