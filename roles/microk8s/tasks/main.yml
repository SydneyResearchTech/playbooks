---
# tasks file for microk8s
#
- name: Apt update
  ansible.builtin.apt:
    cache_valid_time: 86400
    update_cache: true
  when:
    - "'Debian' in ansible_os_family"

- name: Wireguard pre-req. for Calico
  ansible.builtin.include_tasks:
    file: "{{ item }}"
  with_first_found:
    - files:
        - wireguard/install-{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml
        - wireguard/install.yml

- name: Snapd install
  ansible.builtin.include_tasks:
    file: "{{ item }}"
  with_first_found:
    - files:
        - snapd/install-{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml
        - snapd/install-{{ ansible_distribution }}.yml
        - snapd/install.yml

- name: Microk8s install
  ansible.builtin.command:
    cmd: snap install microk8s --classic
    creates: /snap/microk8s

- name: Microk8s status?
  ansible.builtin.command:
    cmd: microk8s status --format yaml --wait-ready --timeout 60
  register: microk8s_status_output
  changed_when: false
- name: Set facts
  ansible.builtin.set_fact:
    microk8s_status: "{{ microk8s_status_output.stdout | from_yaml }}"

- name: Create /etc/profile.d/microk8s.sh
  ansible.builtin.copy:
    dest: /etc/profile.d/microk8s.sh
    group: root
    mode: "0644"
    owner: root
    src: files/profile.sh

- name: Create Ansible facts directory
  ansible.builtin.command:
    cmd: mkdir -p /etc/ansible/facts.d
    creates: /etc/ansible/facts.d

- name: Install Ansible facts for microk8s
  ansible.builtin.copy:
    dest: /etc/ansible/facts.d/microk8s.fact
    mode: "0755"
    src: ansible.fact

- name: NVIDIA container runtime
  when:
    - "'gpu' in microk8s_enable"
  block:
    - name: Add nvidia-container-runtime repo
      ansible.builtin.include_tasks: nvidia-container-runtime/{{ ansible_os_family }}.yml

    - name: Install nvidia-container-runtime
      ansible.builtin.include_tasks: nvidia-container-runtime/install.yml

- name: Create /usr/local/bin/metallb-range.py
  ansible.builtin.copy:
    dest: /usr/local/bin/metallb-range.py
    group: root
    mode: "0755"
    owner: root
    src: files/metallb-range.py

- name: Cluster configuration
  run_once: true
  # delegate_to: cluster_lead
  block:
    - name: Microk8s enable addons
      ansible.builtin.shell: # noqa: no-changed-when
        cmd: |
          ADDON="{{ item }}"
          if [[ $ADDON == gpu ]]; then
            microk8s enable gpu --set toolkit.enabled=false
          elif [[ $ADDON == metallb* ]]; then
            [[ $ADDON == metallb:* ]] \
              && microk8s enable ${ADDON} \
              || microk8s enable $(metallb-range.py "{{ microk8s_metallb_range }}")
          else
            microk8s enable ${ADDON}
          fi
      with_items:
        - "{{ microk8s_enable }}"
        - "{{
            ((microk8s_hostpaths | length > 0) and (microk8s_enable | select('search', 'hostpath-storage') | length == 0)) |
            ternary(['hostpath-storage'], [])
          }}"
      register: enable_addon_output
      changed_when: "'is enabled' in enable_addon_output.stdout"

    - name: Configure cert-manager
      ansible.builtin.import_tasks: configure-cert-manager.yml
      when:
        - "'cert-manager' in microk8s_enable"

    - name: Ingress service
      ansible.builtin.import_tasks: ingress-lb-patch.yml
      when:
        - "'metallb' in microk8s_enable"
        - "'ingress' in microk8s_enable"

    - name: Storage class microk8s-hostpath
      ansible.builtin.import_tasks: hostpath_provisioner.yml
      when:
        - "microk8s_hostpaths|length>0"

    - name: Class local-storage
      ansible.builtin.shell:
        cmd: |
          set -o pipefail
          cat <<EOT |microk8s kubectl apply -f -
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
          provisioner: kubernetes.io/no-provisioner
          reclaimPolicy: Delete
          volumeBindingMode: WaitForFirstConsumer
          EOT
        executable: /bin/bash
      register: sc_local_storage
      changed_when: "'storageclass.storage.k8s.io/local-storage unchanged' not in sc_local_storage.stdout"

- name: Manage local-storage
  ansible.builtin.import_tasks: local-storage.yml

- name: Calicoctl
  ansible.builtin.import_tasks: calicoctl.yml
  when:
    - "microk8s_calicoctl_version|length>0"
