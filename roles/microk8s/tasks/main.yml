---
# tasks file for microk8s
- name: Verify IPv6 requirements
  when:
    - microk8s_cni_ipv6_enabled
  block:
    - name: Get IPv6 default route
      ansible.builtin.command:
        cmd: /usr/sbin/ip -6 -j route list type unicast scope global
      register: ip_route_reg
      changed_when: false

    - name: Set ip6_route fact
      ansible.builtin.set_fact:
        route_ip6: "{{ ip_route_reg.stdout | from_json }}"

    - name: Fail if host IPv6 address is not routable
      when:
        - route_ip6 | selectattr('dst', 'equalto', 'default') | length <= 0
      ansible.builtin.fail:
        msg:
          - Kubernetes configured for IPv6 requires routable environment.

- name: Update package cache
  when: "'Debian' in ansible_os_family"
  ansible.builtin.apt:
    cache_valid_time: 86400
    update_cache: true

- name: Install pre-req. packages
  ansible.builtin.package:
    name:
      - python3-pip
    state: present

- name: Remove conflict packages
  ansible.builtin.package:
    name:
      - python3-kubernetes
    state: absent

- name: Install kubernetes module
  ansible.builtin.pip:
    break_system_packages: true
    name: kubernetes
    state: present

- name: Wireguard pre-req. for Calico
  ansible.builtin.include_tasks:
    file: "{{ item }}"
  with_first_found:
    - files:
        - wireguard/install-{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml
        - wireguard/install.yml

- name: Snapd install
  ansible.builtin.include_tasks:
    file: "{{ item }}"
  with_first_found:
    - files:
        - snapd/install-{{ ansible_distribution }}-{{ ansible_distribution_version }}.yml
        - snapd/install-{{ ansible_distribution }}.yml
        - snapd/install.yml

- name: Create /var/snap/microk8s/common
  ansible.builtin.file:
    mode: "0755"
    path: /var/snap/microk8s/common
    state: directory

- name: Create launch configuration file
  ansible.builtin.template:
    dest: /var/snap/microk8s/common/.microk8s.yaml
    lstrip_blocks: true
    mode: "0644"
    src: microk8s.yaml.j2

- name: Install
  community.general.snap:
    classic: true
    name: microk8s
    state: present

- name: Add users to microk8s group
  ansible.builtin.user:
    append: true
    groups: [microk8s]
    user: "{{ item }}"
  with_items: "{{ microk8s_users }}"

- name: Configure Bash completion
  ansible.builtin.shell:
    cmd: microk8s kubectl completion bash >/etc/bash_completion.d/kubectl
    creates: /etc/bash_completion.d/kubectl

- name: Get microk8s status
  ansible.builtin.command:
    cmd: microk8s status --format yaml --wait-ready --timeout 60
  register: microk8s_status_output
  changed_when: false

- name: Slurp microk8s config
  ansible.builtin.command:
    cmd: microk8s kubectl config view --output=json --raw=true
  changed_when: false
  register: microk8s_config_reg

- name: Install helm diff plugin
  ansible.builtin.shell:
    cmd: |
      set -eo pipefail
      {{ microk8s_helm }} plugin list | grep -q '^diff\s' || \
      {{ microk8s_helm }} plugin install https://github.com/databus23/helm-diff
    executable: /bin/bash
  register: helm_diff_ret
  changed_when: "'diff' in helm_diff_ret.stdout"

- name: Set facts
  ansible.builtin.set_fact:
    microk8s_status: "{{ microk8s_status_output.stdout | from_yaml }}"
    kubeconfig: "{{ microk8s_config_reg.stdout | from_json }}"
    metallb: "{{ microk8s_enable | select('search', '^metallb') | first | default('') }}"

- name: Configure kubectl client
  ansible.builtin.shell:
    cmd: |
      set -e
      USER_GROUP="$(id -gn {{ item }})"
      USER_HOME="$(echo ~{{ item }})"
      [ -z $USER_GROUP ] && exit 127
      [ -z $USER_HOME ] && exit 127
      TMPD="$(mktemp -d)"
      trap "rm -rf $TMPD" EXIT
      [ -f $USER_HOME/.kube/config ] && cp $USER_HOME/.kube/config $TMPD/config
      microk8s config >$TMPD/microk8s.config
      export KUBECONFIG="$TMPD/microk8s.config:$TMPD/config"
      [ -d $USER_HOME/.kube] || \
        install -g $USER_GROUP -m 0750 -o {{ item }} -d $USER_HOME/.kube
      install -g $USER_GROUP -m 0640 -o {{ item }} \
        <(kubectl config view --flatten=true) \
        $USER_HOME/.kube/config
    executable: /bin/bash
  with_items: "{{ microk8s_users }}"
  changed_when: false

- name: Update server certificate
  ansible.builtin.blockinfile:
    block: |
      DNS.6 = {{ ansible_fqdn }}
      DNS.7 = {{ ansible_hostname }}.local
      DNS.8 = {{ ansible_hostname }}
      IP.3 = {{ ansible_default_ipv4.address }}
    insertafter: "#MOREIPS"
    path: /var/snap/microk8s/current/certs/csr.conf.template
    state: present
  notify:
    - Refresh server certificate

- name: Create /etc/profile.d/microk8s.sh
  ansible.builtin.copy:
    dest: /etc/profile.d/microk8s.sh
    group: root
    mode: "0644"
    owner: root
    src: files/profile.sh

- name: Create Ansible facts directory
  ansible.builtin.command:
    cmd: mkdir -p /etc/ansible/facts.d
    creates: /etc/ansible/facts.d

- name: Install Ansible facts for microk8s
  ansible.builtin.copy:
    dest: /etc/ansible/facts.d/microk8s.fact
    mode: "0755"
    src: ansible.fact

- name: NVIDIA container runtime
  when:
    - "'gpu' in microk8s_enable"
  block:
    - name: Add nvidia-container-runtime repo
      ansible.builtin.include_tasks: nvidia-container-runtime/{{ ansible_os_family }}.yml

    - name: Install nvidia-container-runtime
      ansible.builtin.include_tasks: nvidia-container-runtime/install.yml

- name: Create /usr/local/bin/metallb-range.py
  ansible.builtin.copy:
    dest: /usr/local/bin/metallb-range.py
    group: root
    mode: "0755"
    owner: root
    src: files/metallb-range.py

- name: Cluster configuration
  run_once: true
  # delegate_to: cluster_lead
  block:
    - name: Metallb config.
      when: metallb
      ansible.builtin.include_tasks: metallb/configure.yml

    - name: Enable addons
      ansible.builtin.shell:
        cmd: |
          set -eo pipefail
          ADDON="{{ item }}"
          if [[ $ADDON == gpu ]]; then
            microk8s enable gpu --set toolkit.enabled=false
          else
            microk8s enable ${ADDON}
          fi
        executable: /bin/bash
      with_items:
        - "{{ microk8s_enable | reject('search', '^metallb') }}"
        - "{{
            ((microk8s_hostpaths | length > 0) and (microk8s_enable | select('search', 'hostpath-storage') | length == 0)) |
            ternary(['hostpath-storage'], [])
          }}"
      register: enable_addon_output
      changed_when: "'is enabled' in enable_addon_output.stdout"

    - name: Configure cert-manager
      ansible.builtin.import_tasks: configure-cert-manager.yml
      when:
        - "'cert-manager' in microk8s_enable"

    - name: Ingress nginx service via metallb
      when:
        - "'ingress' in microk8s_enable"
        - metallb
      kubernetes.core.k8s:
        apply: true
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: ingress
            namespace: ingress
          spec:
            selector:
              name: nginx-ingress-microk8s
            type: LoadBalancer
            ports:
              - {name: http, protocol: TCP, port: 80, targetPort: 80}
              - {name: https, protocol: TCP, port: 443, targetPort: 443}
        kubeconfig: "{{ kubeconfig }}"
        state: present

    - name: Storage class microk8s-hostpath
      ansible.builtin.import_tasks: hostpath_provisioner.yml
      when:
        - "microk8s_hostpaths|length>0"

    - name: Class local-storage
      kubernetes.core.k8s:
        apply: true
        kubeconfig: "{{ kubeconfig }}"
        state: present
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-storage
          provisioner: kubernetes.io/no-provisioner
          reclaimPolicy: Delete
          volumeBindingMode: WaitForFirstConsumer

    - name: Install DexIdP OIDC provider
      when:
        - microk8s_dexidp_enabled
      ansible.builtin.import_tasks: dex.yml

- name: Manage local-storage
  ansible.builtin.import_tasks: local-storage.yml

- name: Calicoctl
  ansible.builtin.import_tasks: calicoctl.yml
  when:
    - "microk8s_calicoctl_version | length > 0"
